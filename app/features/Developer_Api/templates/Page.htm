<h1>
	<span class="fa fa-puzzle-piece fa-fw"></span>
	API
</h1>


<h2>Struktur von Features, die Formulare darstellen</h2>

<h3>features/../Pre_RegisterApi.php</h3>

<p>
	Registriert die Funktionalität dieses Features in der API, damit sie von anderen Featuren aufgerufen werden kann.
	Das ginge auch über Events, aber nur die API-Funktionalitäten werden auch nach außen veräußert.
</p>

<pre>
Factory::load('\app\features\Core\Api')->register('authentication/add-user', [
    'description'   => 'Allows to add a user.',
    'parameters'    => [],
    'callback'      => array('\\app\\features\\Authentication_AddUser\\models\\Api', 'run'),
]);
</pre>

<p>
	Es können auch weitere Formulardefinitionen hinzugefügt werden:
</p>

<pre>
Factory::load('Event')->trigger('form.register_field', ['checkboxgroup', '\\app\\features\\Api\\Form']);
</pre>

In diesem Fall hieße das neue Feld <code>checkboxgroup</code> und daher müsste es auch eine Methode mit diesem Namen in der angegebenen Klasse geben.
Die Klasse sollte <code>\app\features\Core\Form</code> extenden.

<h3>features/../Page.php</h3>

<p>
	Legt nur die Feld-Definitionen fest und übergibt diese an Event:form.handle inkl. dem API-Pfad, dem die Daten bei validem Formular übergeben werden soll.
	Das generierte Formular-HTML wird an das Template übergeben.
</p>

<pre>
$form_html = Factory::load('Event')->trigger('form.handle', array(
	'authentication/add-user',
	$form_definitions
));
</pre>


<h2>Arbeiten mit Daten</h2>

<h3>features/../models/Api.php</h3>

<p>
	Im Model holt man zuerst ein Bearbeitungsobjekt für die XML-Daten. Dieses Objekt macht das Arbeiten mit den Daten besonders einfach.
	Es ist ein Objekt vom Typ DOMNode, welches aber für das CMS um zahlreiche Funktionen ergänzt wurde, die im folgenden erklärt werden.
</p>

<pre>
$doc = Factory::load('Event')->trigger('data.xml.get');
</pre>

<h2>Registrierte API-Befehle</h2>

~foreach ($toc as $path => $data):~
	<h3>
		<small>/api/</small> ~~htmlspecialchars($path)~
	</h3>

	<p>
		~~:escape($data.description)~
	</p>

	<strong>
		Parameters
	</strong>

	<table>
	<colgroup>
		<col style="width: 20%;" />
		<col />
	</colgroup>
	<tbody>
		~foreach ($data.parameters as $parameter => $description):~
			<tr>
				<td><code>~~$parameter~</code></td>
				<td>~~:escape($description)~</td>
			</tr>
		~endforeach~
	</tbody>
	</table>
~endforeach~

<p>
	Gezeigt werden alle Schnittstellen, für die der derzeitig eingeloggte User Rechte hat.
</p>

<p>
	Es gibt keinen API-Key. Jeder User kann theoretisch mit seinem User auf die API zugreifen und kann das mit der API machen, was seinen Rechten entspricht.
	Somit kann man auch die Daten schützen, weil man mit einem eigens eingerichteten Frontend-Api-User nicht alles kann.
</p>

<ul>
	<li>Die API wird auch intern zum Anlegen von Datensätzen verwendet.</li>
	<li>JSON-REST-API</li>
	<li>Enveloped answer</li>
	<li>Version number in URL</li>
	<li>Etag-Caching: Ist es möglich, sich auch das Generieren der Inhalte zu sparen?</li>
	<li>Verknüpfte Objekte können dank API direkt als Unterarray zurückgegeben werden, z.B. Autoren bei Büchern</li>
</ul>
